{"version":3,"sources":["webpack:///./src/layouts/list.js","webpack:///./src/pages/projects.js"],"names":["children","className","to","Index","data","allPosts","allMarkdownRemark","edges","useState","filteredData","query","state","setState","posts","path","type","placeholder","onChange","event","target","value","filter","post","node","frontmatter","title","tags","toLowerCase","includes","join","length","map","excerpt","featuredImage","width","fluid","childImageSharp","id","key","date","timeToRead","github","href","size","tag","pageQuery"],"mappings":"0MAKe,cAAiB,IAAfA,EAAc,EAAdA,SACb,OACI,yBAAKC,UAAU,aACX,kBAAC,IAAD,KACI,kBAAC,IAAD,wBACA,kBAAC,IAAD,CAAYC,GAAG,aAAf,aAEHF,I,wBCFE,SAASG,EAAT,GAAwB,IAARC,EAAO,EAAPA,KACfC,EAAYD,EAAKE,kBAAxBC,MAD6B,EAGVC,mBAAS,CACjCC,aAAc,GACdC,MAHiB,KACZC,EAH6B,KAGtBC,EAHsB,KAoB7BH,EAAuBE,EAAvBF,aAAcC,EAASC,EAATD,MAEfG,EADmBJ,GAnBN,KAmBsBC,EACRD,EAAeJ,EAEhD,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAYS,KAAK,cACjB,kBAAC,IAAD,KACE,2BAAOb,UAAU,eAAec,KAAK,OAAOC,YAAY,YAAYC,SApBhD,SAAAC,GACxB,IAAMR,EAAQQ,EAAMC,OAAOC,MAErBX,GADQL,EAAKE,kBAAkBC,OAAS,IACnBc,QAAO,SAAAC,GAAS,IAAD,EAClBA,EAAKC,KAAKC,YAAzBC,EADiC,EACjCA,MAAOC,EAD0B,EAC1BA,KACd,OAAOD,EAAME,cAAcC,SAASlB,EAAMiB,gBAAkBD,EAAKG,KAAK,IAAIF,cAAcC,SAASlB,EAAMiB,kBAEzGf,EAAS,CACPF,QAAOD,qBAcNI,EACEQ,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYC,MAAMK,OAAS,KACpDC,KAAI,YAAmB,IAAXT,EAAU,EAAhBC,KACDS,EAAU,KAad,OAXEA,EADqC,OAAnCV,EAAKE,YAAYS,cACR,kBAAC,IAAD,KACT,kBAAC,IAAD,CAAQC,MAAM,SACZ,kBAAC,IAAD,CAAKC,MAAOb,EAAKE,YAAYS,cAAcG,gBAAgBD,SAE7D,kBAAC,IAAD,CAAQD,MAAM,QACXZ,EAAKU,UAIAV,EAAKU,QAGf,kBAAC,IAAD,CAASK,GAAIf,EAAKe,GAAIC,IAAKhB,EAAKe,IAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQH,MAAM,QACZ,kBAAC,IAAD,CAAMjC,UAAU,YAAYC,GAAIoB,EAAKE,YAAYV,MAAOQ,EAAKE,YAAYC,OACzE,uBAAGxB,UAAU,kBAAkBqB,EAAKE,YAAYe,KAAhD,IAAuDjB,EAAKkB,WAA5D,MAEF,kBAAC,IAAD,CAAQN,MAAM,SACkB,OAA5BZ,EAAKE,YAAYiB,OAAmB,uBAAGC,KAAMpB,EAAKE,YAAYiB,QAAQ,kBAAC,IAAD,CAAUE,KAAK,UAAgB,8BAC3E,OAA1BrB,EAAKE,YAAYE,KAAiB,wBAAIzB,UAAU,QAAQqB,EAAKE,YAAYE,KAAKK,KAAI,SAACa,GACnF,OAAQ,wBAAI3C,UAAU,MAAMqC,IAAKM,GAAMA,OAC9B,+BAGf,6BACGZ,Q,kFASV,IAAMa,EAAS","file":"component---src-pages-projects-js-97de4fb760ba053de6be.js","sourcesContent":["import React from \"react\"\n\nimport { Navbar, NavbarBrand, NavbarLink } from \"../components/navbar\"\n\n\nexport default ({children}) => {\n    return (\n        <div className=\"container\">\n            <Navbar>\n                <NavbarBrand>Arden Rasmussen</NavbarBrand>\n                <NavbarLink to=\"/projects\">Projects</NavbarLink>\n            </Navbar>\n            {children}\n        </div>\n    )\n}","import React, {useState} from \"react\";\n\nimport {Link, graphql} from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport {FaGithub} from 'react-icons/fa';\n\nimport Layout from \"../layouts/list\"\nimport {Section, Breadcrumb} from \"../components/typeogrophy\"\nimport {Row, Column} from \"../components/grid\"\n\nexport default function Index({data}) {\n  const {edges: allPosts} = data.allMarkdownRemark\n  const emptyQuery = \"\"\n  const [state, setState] = useState({\n    filteredData: [],\n    query: emptyQuery,\n  })\n\n  const handleInputChange = event => {\n    const query = event.target.value\n    const posts = data.allMarkdownRemark.edges || [];\n    const filteredData = posts.filter(post => {\n      const {title, tags} = post.node.frontmatter\n      return title.toLowerCase().includes(query.toLowerCase()) || tags.join(\"\").toLowerCase().includes(query.toLowerCase())\n    })\n    setState({\n      query, filteredData\n    })\n  }\n\n  const {filteredData, query} = state;\n  const hasSearchResults = filteredData && query !== emptyQuery;\n  const posts = hasSearchResults ? filteredData : allPosts;\n\n  return (\n    <Layout>\n      <Breadcrumb path=\"/projects\" />\n      <Row>\n        <input className=\"u-full-width\" type=\"text\" placeholder=\"Search...\" onChange={handleInputChange} />\n      </Row>\n      {posts\n        .filter(post => post.node.frontmatter.title.length > 0)\n        .map(({node: post}) => {\n          let excerpt = null\n          if (post.frontmatter.featuredImage !== null) {\n            excerpt = (<Row>\n              <Column width=\"three\">\n                <Img fluid={post.frontmatter.featuredImage.childImageSharp.fluid} />\n              </Column>\n              <Column width=\"nine\">\n                {post.excerpt}\n              </Column>\n            </Row>)\n          } else {\n            excerpt = post.excerpt\n          }\n          return (\n            <Section id={post.id} key={post.id}>\n              <Row>\n                <Column width=\"nine\">\n                  <Link className=\"page-link\" to={post.frontmatter.path}>{post.frontmatter.title}</Link>\n                  <p className=\"page-subheader\">{post.frontmatter.date} {post.timeToRead}m</p>\n                </Column>\n                <Column width=\"three\">\n                  {(post.frontmatter.github !== null) ? <a href={post.frontmatter.github}><FaGithub size=\"3rem\" /></a> : <div></div>}\n                  {(post.frontmatter.tags !== null) ? <ul className=\"tags\">{post.frontmatter.tags.map((tag) => {\n                    return (<li className=\"tag\" key={tag}>{tag}</li>)\n                  })}</ul> : <ul></ul>}\n                </Column>\n              </Row>\n              <div>\n                {excerpt}\n              </div>\n            </Section>\n          )\n        })}\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n    query {\n        allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date]}) {\n            edges {\n                node {\n                    timeToRead\n                    excerpt(pruneLength: 250)\n                    id\n                    frontmatter {\n                        title\n                        date(formatString: \"MMMM DD, YYYY\")\n                        path\n                        github\n                        tags\n                        featuredImage {\n                            childImageSharp {\n                                fluid {\n                                    ...GatsbyImageSharpFluid\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}