{"componentChunkName":"component---src-templates-project-js","path":"/projects/specula","result":{"data":{"markdownRemark":{"id":"b52f4635-fc14-51ae-b21f-da4a14fa7387","html":"<p>This ray tracer implements the basis of a ray tracing rendering engine in C++.\nIt is possible to render still images, or sequences of images. Multi threading\nhas also been implemented allowing for significantly faster render times.</p>\n<p><strong>Note:</strong> The Specula library is currently being rewritten to utilize\npathtracing, and to become a physicaly based renderer.</p>\n<p>The ability to create multiple object of <em>sphere</em>, <em>triangle</em>, <em>plane</em>,\n<em>circle</em>, or <em>mesh</em> types is currently available. Where a mesh is any\ncollection of triangles specified by an <code class=\"language-text\">.stl</code> file. Thus allowing for the\nimport of any arbitrary model. Using these five different supported objects,\nthere is the possibility for the construction of all three dimensional models.</p>\n<p>The implementation of different materials is such that the reflectively of the\nmaterial, the specular index, and the diffuse and specular colors can be\ndetermined. Using these settings it is possible to demonstrate most opaque\nmaterials.</p>\n<p>There are three formats of lights implemented in the system. <em>Distant</em> lights\nare lights that cast parallel rays across the entire space. They are useful for\nsimulations of sunlight, or large sources of light that are very far away.\n<em>Point</em> lights approximate point sources. <em>Area</em> lights represent a light\nsource from a rectangle. This is useful for most light sources, as very few\nsources of light are actual point sources, and can be better represented by\nthis area light source. Every light can have have a specified intensity and\ncolor. And area light sources can specify the number of samples for calculating\nthe lighting. Higher number of samples improves the quality of soft shadows\nproduced in the final image.</p>\n<p>The entire process is self enclosed, as the process of compilation also\ncompiles and links <code class=\"language-text\">libpng</code> in order to output <code class=\"language-text\">png</code> files.</p>\n<p>The multi threading is optimized by scattering the pixels that each thread\nrenders, so that no single thread is solely rendering a simple set of pixels.\nThis proves a significantly faster rendering time. Thus allowing for the\nrendering of significantly more complex systems.</p>","timeToRead":1,"frontmatter":{"date":"May 04, 2020","path":"/projects/specula","title":"Specula","tags":["c++","graphics"],"github":"https://github.com/LuxAter/Specula"}}},"pageContext":{}}}